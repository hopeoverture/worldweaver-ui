// Generated TypeScript types from Supabase schema
// Generated at: 2025-09-10T00:52:13.573Z
// DO NOT EDIT THIS FILE MANUALLY - it will be overwritten

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

// Database table names
export type DatabaseTable = 'profiles' | 'worlds' | 'world_members' | 'folders' | 'templates' | 'entities' | 'relationships' | 'world_bans' | 'world_invites' | 'activity_logs' | 'world_files';

// Known database tables as const array
export const DATABASE_TABLES = [
  'profiles',
  'worlds',
  'world_members',
  'folders',
  'templates',
  'entities',
  'relationships',
  'world_bans',
  'world_invites',
  'activity_logs',
  'world_files'
] as const;

// Database enums
export type WorldMemberRole = string; // TODO: Define enum values

// Database functions
export type DatabaseFunction = 'accept_world_invite' | 'user_has_world_access';

// Known database functions as const array
export const DATABASE_FUNCTIONS = [
  'accept_world_invite',
  'user_has_world_access'
] as const;

// Base database types (extend these with actual column definitions)

export interface ProfilesRow {
  id?: string;
  created_at?: string;
  updated_at?: string;
  // TODO: Add specific column types based on schema introspection
}

export interface WorldsRow {
  id?: string;
  created_at?: string;
  updated_at?: string;
  // TODO: Add specific column types based on schema introspection
}

export interface WorldMembersRow {
  id?: string;
  created_at?: string;
  updated_at?: string;
  // TODO: Add specific column types based on schema introspection
}

export interface FoldersRow {
  id?: string;
  created_at?: string;
  updated_at?: string;
  // TODO: Add specific column types based on schema introspection
}

export interface TemplatesRow {
  id?: string;
  created_at?: string;
  updated_at?: string;
  // TODO: Add specific column types based on schema introspection
}

export interface EntitiesRow {
  id?: string;
  created_at?: string;
  updated_at?: string;
  // TODO: Add specific column types based on schema introspection
}

export interface RelationshipsRow {
  id?: string;
  created_at?: string;
  updated_at?: string;
  // TODO: Add specific column types based on schema introspection
}

export interface WorldBansRow {
  id?: string;
  created_at?: string;
  updated_at?: string;
  // TODO: Add specific column types based on schema introspection
}

export interface WorldInvitesRow {
  id?: string;
  created_at?: string;
  updated_at?: string;
  // TODO: Add specific column types based on schema introspection
}

export interface ActivityLogsRow {
  id?: string;
  created_at?: string;
  updated_at?: string;
  // TODO: Add specific column types based on schema introspection
}

export interface WorldFilesRow {
  id?: string;
  created_at?: string;
  updated_at?: string;
  // TODO: Add specific column types based on schema introspection
}

// Database operations result types
export interface DatabaseResult<T = any> {
  data: T | null;
  error: Error | null;
}

// Common query filters
export interface QueryFilters {
  limit?: number;
  offset?: number;
  orderBy?: string;
  orderAsc?: boolean;
}

// Type guards
export function isValidTableName(name: string): name is DatabaseTable {
  return DATABASE_TABLES.includes(name as DatabaseTable);
}

export function isValidFunctionName(name: string): name is DatabaseFunction {
  return DATABASE_FUNCTIONS.includes(name as DatabaseFunction);
}
