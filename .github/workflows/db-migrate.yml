name: DB Migrate (Supabase)

on:
  workflow_dispatch:
    inputs:
      apply:
        description: "Apply migrations to Supabase (true/false)"
        required: true
        default: "true"

jobs:
  migrate:
    if: ${{ github.event.inputs.apply == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install psql client
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client

      - name: Resolve IPv4 and prepare URL
        env:
          SUPABASE_DB_OWNER_URL: ${{ secrets.SUPABASE_DB_OWNER_URL }}
        run: |
          if [ -z "$SUPABASE_DB_OWNER_URL" ]; then echo "Missing secret SUPABASE_DB_OWNER_URL" && exit 1; fi
          HOST=$(echo "$SUPABASE_DB_OWNER_URL" | sed -E 's|.*@([^:/?]+).*|\1|')
          IP=$(getent ahostsv4 "$HOST" | awk '{print $1; exit}')
          if [ -z "$IP" ]; then echo "Failed to resolve IPv4 for $HOST" && exit 1; fi
          echo "Resolved $HOST -> $IP"
          # Append hostaddr to force IPv4 in libpq
          if echo "$SUPABASE_DB_OWNER_URL" | grep -q '?'; then
            URL_IP4="${SUPABASE_DB_OWNER_URL}&hostaddr=${IP}"
          else
            URL_IP4="${SUPABASE_DB_OWNER_URL}?hostaddr=${IP}"
          fi
          # Ensure sslmode=require present
          if ! echo "$URL_IP4" | grep -q 'sslmode='; then URL_IP4="${URL_IP4}&sslmode=require"; fi
          echo "URL_IP4=$URL_IP4" >> $GITHUB_ENV

      - name: Preflight connectivity (owner)
        run: |
          psql "$URL_IP4" -c "select current_user, current_database();"
          psql "$URL_IP4" -c "select tableowner from pg_tables where schemaname='storage' and tablename='objects';"

      - name: Run storage policies migration (psql)
        run: |
          psql "$URL_IP4" -v ON_ERROR_STOP=1 -f supabase/migrations/20250907170000_add_storage_policies.sql

      - name: Optimize RLS auth calls (psql)
        run: |
          psql "$URL_IP4" -v ON_ERROR_STOP=1 -f supabase/migrations/20250907173500_optimize_rls_auth_calls.sql

      - name: Verify storage policies present
        run: |
          psql "$URL_IP4" -c "select polname, cmd from pg_policies where schemaname='storage' and tablename='objects' order by polname;"
